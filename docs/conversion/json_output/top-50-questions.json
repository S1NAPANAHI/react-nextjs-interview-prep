{
  "title": "Top 50 React Interview Questions",
  "description": "Master the most frequently asked React interview questions with detailed explanations and examples",
  "lastUpdated": "2025-09-25",
  "totalQuestions": 50,
  "categories": [
    "React Hooks",
    "Data Fetching",
    "SSR/SSG",
    "State Management",
    "Security",
    "Build & Deploy",
    "Styling",
    "React Internals",
    "React Fundamentals",
    "Lifecycle",
    "Routing",
    "Testing",
    "Performance",
    "Comparison",
    "Error Handling",
    "Best Practices",
    "Forms",
    "Advanced Concepts",
    "Advanced Patterns",
    "Development Tools",
    "Events"
  ],
  "difficulties": [
    "Advanced",
    "Beginner",
    "Intermediate"
  ],
  "questions": [
    {
      "id": "q1",
      "question": "What is React and why would you use it?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "React is a JavaScript library developed by Facebook for building user interfaces, particularly single-page applications. It uses a component-based architecture, Virtual DOM for efficient updates, and follows a declarative programming paradigm. Key benefits include reusable components, better performance through Virtual DOM, strong community support, and excellent developer tools.",
      "keyPoints": [
        "Virtual DOM for performance",
        "Component-based architecture"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q2",
      "question": "What is JSX and how does it work?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "JSX (JavaScript XML) is a syntax extension for JavaScript that allows you to write HTML-like code within JavaScript. It makes React components more readable and easier to write. JSX gets transpiled by tools like Babel into React.createElement() calls. Example: <div>Hello World</div> becomes React.createElement('div', null, 'Hello World').",
      "codeExample": {
        "title": "Code Example",
        "code": "<div>Hello World</div> becomes React"
      },
      "keyPoints": [
        "Component-based architecture"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q3",
      "question": "What is the Virtual DOM?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "The Virtual DOM is a lightweight JavaScript representation of the actual DOM. React creates a virtual copy, compares it with the previous version when changes occur (diffing), and updates only the changed parts in the real DOM (reconciliation). This makes updates much faster than manipulating the DOM directly.",
      "keyPoints": [
        "Virtual DOM for performance"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q4",
      "question": "What's the difference between props and state?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Props (properties) are immutable data passed from parent to child components - they're read-only. State is mutable data owned by a component that can change over time, typically in response to user actions or network responses. Props enable data flow down the component tree, while state manages local component data.",
      "keyPoints": [
        "they're read-only. State is mutable data owned by a component that can change over time, typically in response to user actions or network responses. Props enable data flow down the component tree, while state manages local component data."
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q5",
      "question": "What are React components? Functional vs Class components?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Components are reusable, self-contained pieces of UI. Functional components are JavaScript functions that return JSX and use hooks for state/lifecycle. Class components extend React.Component and use lifecycle methods and this.state. Functional components are now preferred due to hooks, cleaner syntax, and better performance.",
      "keyPoints": [
        "Component-based architecture",
        "State management",
        "React Hooks"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q6",
      "question": "Why are keys important in React lists?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Keys help React identify which items have changed, been added, or removed in lists. They provide stable identity for each element, enabling efficient updates and preventing rendering bugs. Keys should be unique and stable - avoid using array indexes when list items can change order.",
      "keyPoints": [
        "avoid using array indexes when list items can change order.",
        "Efficient rendering"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q7",
      "question": "What is useEffect and when do you use it?",
      "difficulty": "Beginner",
      "category": "React Hooks",
      "answer": "useEffect is a Hook that lets you perform side effects in functional components (data fetching, subscriptions, DOM manipulation). It runs after render and can optionally clean up. The dependency array controls when it runs: [] runs once, [value] runs when value changes, no array runs every render.",
      "keyPoints": [
        "Component-based architecture",
        "React Hooks"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q8",
      "question": "What are controlled vs uncontrolled components?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Controlled components have their value controlled by React state - the component's value comes from state and updates through event handlers. Uncontrolled components manage their own state internally and are accessed via refs. Controlled components are recommended for predictable data flow and easier validation.",
      "keyPoints": [
        "the component's value comes from state and updates through event handlers. Uncontrolled components manage their own state internally and are accessed via refs. Controlled components are recommended for predictable data flow and easier validation."
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q9",
      "question": "What are React Hooks and name the common ones?",
      "difficulty": "Intermediate",
      "category": "React Hooks",
      "answer": "Hooks are functions that let you use state and other React features in functional components. Common hooks include: useState (state management), useEffect (side effects), useContext (context consumption), useRef (DOM access), useMemo (memoization), useCallback (function memoization), useReducer (complex state logic).",
      "keyPoints": [
        "Component-based architecture",
        "State management",
        "React Hooks"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?"
      ]
    },
    {
      "id": "q10",
      "question": "How do you handle events in React?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "React uses SyntheticEvents, which are wrappers around native DOM events providing consistent behavior across browsers. Event handlers are named using camelCase (onClick, not onclick) and are passed as functions. Events are automatically bound in functional components, but need binding in class components.",
      "keyPoints": [
        "Component-based architecture"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q11",
      "question": "What is the Context API and when should you use it?",
      "difficulty": "Intermediate",
      "category": "State Management",
      "answer": "Context API provides a way to pass data through the component tree without prop drilling. Create a context with React.createContext(), provide values with Provider, and consume with useContext hook or Consumer. Use for truly global data like themes, authentication, or language settings - avoid overuse as it can make components harder to test.",
      "keyPoints": [
        "avoid overuse as it can make components harder to test."
      ],
      "followUpQuestions": [
        "What are the different ways to manage state in React?",
        "When should you lift state up?"
      ]
    },
    {
      "id": "q12",
      "question": "What is prop drilling and how can you avoid it?",
      "difficulty": "Intermediate",
      "category": "State Management",
      "answer": "Prop drilling is passing props through multiple component levels just to reach a deeply nested child. It makes code harder to maintain. Avoid it using: Context API for global state, custom hooks for shared logic, state management libraries like Redux, or component composition patterns.",
      "keyPoints": [
        "Component-based architecture",
        "State management",
        "React Hooks",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "What are the different ways to manage state in React?",
        "When should you lift state up?"
      ]
    },
    {
      "id": "q13",
      "question": "Explain useState hook with examples",
      "difficulty": "Beginner",
      "category": "React Hooks",
      "answer": "useState adds state to functional components. Returns an array: [currentValue, setterFunction]. Example: const [count, setCount] = useState(0). State updates are asynchronous and merge (objects) or replace (primitives). For state dependent on previous value, use functional updates: setCount(prev => prev + 1).",
      "keyPoints": [
        "Component-based architecture",
        "State management"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q14",
      "question": "What is useRef and when do you use it?",
      "difficulty": "Intermediate",
      "category": "React Hooks",
      "answer": "useRef returns a mutable ref object whose .current property persists across renders without causing re-renders. Used for: accessing DOM elements directly, storing mutable values that don't trigger re-renders, keeping references to timers/intervals, or storing previous state/props values.",
      "keyPoints": [
        "State management",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?"
      ]
    },
    {
      "id": "q15",
      "question": "How do you optimize React component performance?",
      "difficulty": "Intermediate",
      "category": "Performance",
      "answer": "Use React.memo for functional components to prevent unnecessary re-renders, implement useMemo for expensive calculations, useCallback for stable function references, lazy loading with React.lazy and Suspense, proper key props in lists, avoid inline objects/functions as props, and use React DevTools Profiler to identify bottlenecks.",
      "keyPoints": [
        "Component-based architecture",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How do you measure React performance?",
        "What causes unnecessary re-renders?",
        "What are the lifecycle methods?"
      ]
    },
    {
      "id": "q16",
      "question": "What are React Fragments and why use them?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Fragments let you group multiple children without adding extra DOM nodes. Use <React.Fragment> or shorthand <> </>. Helpful when a component needs to return multiple elements but you don't want wrapper divs cluttering the DOM structure or affecting CSS styling.",
      "keyPoints": [
        "Component-based architecture"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q17",
      "question": "How do you handle forms in React?",
      "difficulty": "Intermediate",
      "category": "Forms",
      "answer": "Use controlled components where form data is handled by React state. Each input has a value prop from state and onChange handler to update state. For complex forms, consider useReducer or libraries like Formik/React Hook Form. Always validate input and handle submission properly with preventDefault().",
      "keyPoints": [
        "Component-based architecture",
        "State management",
        "React Hooks",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How do you handle form validation?",
        "What's the difference between controlled and uncontrolled components?"
      ]
    },
    {
      "id": "q18",
      "question": "What is lifting state up?",
      "difficulty": "Intermediate",
      "category": "State Management",
      "answer": "Moving state from child components to their closest common ancestor so multiple components can share the same state. The parent manages state and passes it down as props along with update functions. This ensures single source of truth and synchronized data across components.",
      "keyPoints": [
        "Component-based architecture",
        "State management",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "What are the different ways to manage state in React?",
        "When should you lift state up?"
      ]
    },
    {
      "id": "q19",
      "question": "How do you implement conditional rendering?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Use JavaScript expressions within JSX: ternary operator {condition ? <ComponentA /> : <ComponentB />}, logical AND {condition && <Component />}, if-else statements before return, or early returns. Choose based on readability and complexity of conditions.",
      "keyPoints": [
        "Component-based architecture",
        "State management"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q20",
      "question": "What are the rules of hooks?",
      "difficulty": "Intermediate",
      "category": "React Hooks",
      "answer": "1. Only call hooks at the top level of React functions, never inside loops, conditions, or nested functions. 2. Only call hooks from React function components or custom hooks. 3. Always call hooks in the same order. These rules ensure hooks work correctly with React's internal state management.",
      "keyPoints": [
        "Only call hooks at the top level of React functions, never inside loops, conditions, or nested functions. 2. Only call hooks from React function components or custom hooks. 3. Always call hooks in the same order. These rules ensure hooks work correctly with React's internal state management."
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?"
      ]
    },
    {
      "id": "q21",
      "question": "What is useMemo and when should you use it?",
      "difficulty": "Intermediate",
      "category": "React Hooks",
      "answer": "useMemo memoizes expensive calculations, recomputing only when dependencies change. Use for computationally intensive operations that don't need to run on every render. Example: const expensiveValue = useMemo(() => computeExpensiveValue(a, b), [a, b]). Don't overuse - memoization has overhead.",
      "keyPoints": [
        "memoization has overhead.",
        "Efficient rendering"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?"
      ]
    },
    {
      "id": "q22",
      "question": "What is useCallback and when should you use it?",
      "difficulty": "Intermediate",
      "category": "React Hooks",
      "answer": "useCallback memoizes functions to prevent recreation on every render. Useful when passing callbacks to optimized child components that depend on reference equality. Example: const memoizedCallback = useCallback(() => doSomething(a, b), [a, b]). Helps prevent unnecessary child re-renders.",
      "keyPoints": [
        "Component-based architecture",
        "Efficient rendering"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?"
      ]
    },
    {
      "id": "q23",
      "question": "What is useReducer and when would you use it over useState?",
      "difficulty": "Intermediate",
      "category": "React Hooks",
      "answer": "useReducer manages complex state logic through actions and reducers, similar to Redux. Use when: state has multiple sub-values, next state depends on previous one, complex state transitions, or when you need more predictable state updates. Better than useState for complex state logic.",
      "keyPoints": [
        "State management"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?"
      ]
    },
    {
      "id": "q24",
      "question": "How do you create custom hooks?",
      "difficulty": "Intermediate",
      "category": "React Hooks",
      "answer": "Custom hooks are JavaScript functions starting with 'use' that can call other hooks. They extract component logic into reusable functions. Example: function useCounter(initialValue) { const [count, setCount] = useState(initialValue); const increment = () => setCount(count + 1); return { count, increment }; }",
      "codeExample": {
        "title": "Code Example",
        "code": "function useCounter(initialValue) { const [count, setCount] = useState(initialValue); const increment = () => setCount(count + 1); return { count, increment }; }"
      },
      "keyPoints": [
        "Component-based architecture",
        "State management",
        "React Hooks"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?"
      ]
    },
    {
      "id": "q25",
      "question": "What are Higher-Order Components (HOCs)?",
      "difficulty": "Advanced",
      "category": "Advanced Patterns",
      "answer": "HOCs are functions that take a component and return a new component with additional props or behavior. Used for cross-cutting concerns like authentication, logging, or data fetching. Example: const withAuth = (WrappedComponent) => (props) => isAuthenticated ? <WrappedComponent {...props} /> : <Login />",
      "codeExample": {
        "title": "Code Example",
        "code": "const withAuth = (WrappedComponent) => (props) => isAuthenticated ? <WrappedComponent {"
      },
      "keyPoints": [
        "Component-based architecture",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?",
        "What are the lifecycle methods?"
      ]
    },
    {
      "id": "q26",
      "question": "What are render props?",
      "difficulty": "Advanced",
      "category": "Advanced Patterns",
      "answer": "A technique for sharing code between components using a prop whose value is a function. The component calls this function instead of implementing its own render logic. Example: <DataProvider render={(data) => <DisplayComponent data={data} />} />. Provides flexibility in what gets rendered.",
      "codeExample": {
        "title": "Code Example",
        "code": "<DataProvider render={(data) => <DisplayComponent data={data} />} />"
      },
      "keyPoints": [
        "Component-based architecture",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q27",
      "question": "What are error boundaries?",
      "difficulty": "Advanced",
      "category": "Error Handling",
      "answer": "Error boundaries are React components that catch JavaScript errors in their child component tree, log errors, and display fallback UI. Implemented using componentDidCatch and static getDerivedStateFromError in class components. They don't catch errors in event handlers, async code, or during SSR.",
      "keyPoints": [
        "Component-based architecture",
        "State management"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q28",
      "question": "What is React.lazy and Suspense?",
      "difficulty": "Advanced",
      "category": "Performance",
      "answer": "React.lazy enables dynamic imports for code splitting. Suspense provides fallback UI while lazy components load. Example: const LazyComponent = React.lazy(() => import('./LazyComponent')); <Suspense fallback={<Loading />}><LazyComponent /></Suspense>. Improves initial load performance.",
      "codeExample": {
        "title": "Code Example",
        "code": "Suspense fallback={<Loading /"
      },
      "keyPoints": [
        "Component-based architecture",
        "Performance optimization"
      ],
      "followUpQuestions": [
        "How do you measure React performance?",
        "What causes unnecessary re-renders?",
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q29",
      "question": "What are React Portals?",
      "difficulty": "Advanced",
      "category": "Advanced Concepts",
      "answer": "Portals render children into a DOM node outside the parent component's hierarchy. Useful for modals, tooltips, dropdowns that need to escape parent overflow/z-index constraints. Example: ReactDOM.createPortal(child, document.getElementById('modal-root'))",
      "keyPoints": [
        "Component-based architecture",
        "Efficient rendering"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q30",
      "question": "What is forwardRef and when do you use it?",
      "difficulty": "Advanced",
      "category": "Advanced Concepts",
      "answer": "forwardRef allows passing refs through components to child elements. Useful for library components that need to expose DOM elements to parent components. Example: const MyInput = forwardRef((props, ref) => <input {...props} ref={ref} />)",
      "codeExample": {
        "title": "Code Example",
        "code": "const MyInput = forwardRef((props, ref) => <input {"
      },
      "keyPoints": [
        "Component-based architecture",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q31",
      "question": "Explain React's reconciliation process",
      "difficulty": "Advanced",
      "category": "React Internals",
      "answer": "Reconciliation is React's algorithm to determine what changes need to be made to the DOM. It compares (diffs) the new virtual DOM tree with the previous one, identifies minimal changes needed, and efficiently updates the real DOM. Uses heuristics like component type and keys for optimization.",
      "keyPoints": [
        "Component-based architecture"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q32",
      "question": "What is React Fiber?",
      "difficulty": "Advanced",
      "category": "React Internals",
      "answer": "React Fiber is a complete rewrite of React's core algorithm for better performance and new features. It enables incremental rendering, pause/abort/resume work, priority-based updates, and time-slicing. Allows React to break rendering work into chunks and spread it over multiple frames.",
      "keyPoints": [
        "Performance optimization",
        "Efficient rendering"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q33",
      "question": "What are synthetic events in React?",
      "difficulty": "Intermediate",
      "category": "Events",
      "answer": "SyntheticEvents are React's wrapper around native DOM events, providing consistent API across different browsers. They have the same interface as native events but work identically across all browsers. Events are pooled for performance - use event.persist() if accessing asynchronously.",
      "keyPoints": [
        "use event.persist() if accessing asynchronously.",
        "Performance optimization"
      ]
    },
    {
      "id": "q34",
      "question": "How do you handle asynchronous data fetching in React?",
      "difficulty": "Intermediate",
      "category": "Data Fetching",
      "answer": "Use useEffect for side effects, manage loading/error states with useState, handle cleanup to prevent memory leaks. Consider custom hooks for reusable logic, libraries like SWR/React Query for caching, and proper error boundaries. Example pattern: loading -> success/error states.",
      "keyPoints": [
        "State management",
        "React Hooks",
        "Props and data flow"
      ]
    },
    {
      "id": "q35",
      "question": "What is React.memo and when should you use it?",
      "difficulty": "Intermediate",
      "category": "Performance",
      "answer": "React.memo is a higher-order component that memoizes functional components, preventing re-renders when props haven't changed (shallow comparison). Use when component renders often with same props or parent re-renders frequently. Can provide custom comparison function as second argument.",
      "keyPoints": [
        "Component-based architecture",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How do you measure React performance?",
        "What causes unnecessary re-renders?"
      ]
    },
    {
      "id": "q36",
      "question": "How do you test React components?",
      "difficulty": "Intermediate",
      "category": "Testing",
      "answer": "Use React Testing Library for user-centric testing, Jest for test runner, render components and interact with them as users would. Test behavior, not implementation. Mock external dependencies, use screen queries (getByRole, getByText), simulate user interactions with userEvent.",
      "keyPoints": [
        "Component-based architecture",
        "Efficient rendering"
      ],
      "followUpQuestions": [
        "What are the lifecycle methods?"
      ]
    },
    {
      "id": "q37",
      "question": "What is the difference between controlled and uncontrolled components?",
      "difficulty": "Beginner",
      "category": "Forms",
      "answer": "Controlled: React controls the input value via state, value prop, and onChange handler. Single source of truth, predictable, easier to validate. Uncontrolled: DOM controls the value, accessed via refs, form data handled at submission. Less code but harder to validate dynamically.",
      "keyPoints": [
        "State management",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How do you handle form validation?",
        "What's the difference between controlled and uncontrolled components?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q38",
      "question": "How do you optimize performance in large React applications?",
      "difficulty": "Advanced",
      "category": "Performance",
      "answer": "Use code splitting (React.lazy), memoization (React.memo, useMemo, useCallback), virtualization for large lists, optimize bundle size, implement proper state management, avoid unnecessary re-renders, use production builds, monitor with React DevTools Profiler, consider SSR/SSG.",
      "keyPoints": [
        "State management",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How do you measure React performance?",
        "What causes unnecessary re-renders?",
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q39",
      "question": "What is the component lifecycle in class components?",
      "difficulty": "Intermediate",
      "category": "Lifecycle",
      "answer": "Mounting: constructor, componentDidMount. Updating: shouldComponentUpdate, componentDidUpdate. Unmounting: componentWillUnmount. Error: componentDidCatch. Each phase allows different operations - setup, cleanup, optimization, error handling. Hooks replace these in functional components.",
      "keyPoints": [
        "setup, cleanup, optimization, error handling. Hooks replace these in functional components."
      ],
      "followUpQuestions": [
        "What are the lifecycle methods?"
      ]
    },
    {
      "id": "q40",
      "question": "How do you handle state management in large applications?",
      "difficulty": "Advanced",
      "category": "State Management",
      "answer": "For local state use useState/useReducer. For global state consider Context API, Redux (predictable state updates), Zustand (lightweight), or Jotai (atomic state). Choose based on complexity: Context for simple global state, Redux for complex state logic, newer libraries for modern alternatives.",
      "keyPoints": [
        "State management"
      ],
      "followUpQuestions": [
        "What are the different ways to manage state in React?",
        "When should you lift state up?",
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q41",
      "question": "What is Server-Side Rendering (SSR) in React?",
      "difficulty": "Advanced",
      "category": "SSR/SSG",
      "answer": "SSR renders React components on the server and sends HTML to the browser. Benefits: better SEO, faster initial page load, improved performance on slow devices. Implemented with frameworks like Next.js. Challenges: complexity, server resources, hydration mismatches.",
      "keyPoints": [
        "Component-based architecture",
        "Performance optimization",
        "Efficient rendering"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q42",
      "question": "What is Static Site Generation (SSG)?",
      "difficulty": "Advanced",
      "category": "SSR/SSG",
      "answer": "SSG pre-renders pages at build time, generating static HTML files. Faster than SSR, better for SEO than CSR, great for content that doesn't change often. Can combine with incremental regeneration for dynamic content. Implemented with Next.js getStaticProps/getStaticPaths.",
      "keyPoints": [
        "Props and data flow",
        "Efficient rendering"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q43",
      "question": "How do you implement routing in React?",
      "difficulty": "Intermediate",
      "category": "Routing",
      "answer": "Use React Router for client-side routing. BrowserRouter for history API, Routes/Route for path matching, Link/NavLink for navigation, useNavigate for programmatic navigation, useParams for route parameters. Handle nested routes, protected routes, and 404 pages.",
      "keyPoints": [
        "Implementation knowledge"
      ]
    },
    {
      "id": "q44",
      "question": "What are React Design Patterns?",
      "difficulty": "Advanced",
      "category": "Advanced Patterns",
      "answer": "Common patterns: Presentational/Container (separate logic from UI), Render Props (share code via function props), HOCs (enhance components), Custom Hooks (reusable stateful logic), Compound Components (components working together), Provider Pattern (context-based state).",
      "keyPoints": [
        "Component-based architecture",
        "State management",
        "React Hooks",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q45",
      "question": "How do you handle environment variables in React?",
      "difficulty": "Intermediate",
      "category": "Build & Deploy",
      "answer": "Use REACT_APP_ prefix for custom environment variables in Create React App. Access via process.env.REACT_APP_VARIABLE_NAME. Store in .env files (.env, .env.local, .env.production). Never store secrets in React apps - they're visible to users.",
      "keyPoints": [
        "they're visible to users."
      ]
    },
    {
      "id": "q46",
      "question": "What is the difference between React and other frameworks like Angular/Vue?",
      "difficulty": "Intermediate",
      "category": "Comparison",
      "answer": "React: Library focused on UI, flexible, large ecosystem, JSX, unidirectional data flow. Angular: Full framework, TypeScript-first, dependency injection, two-way binding. Vue: Progressive framework, template syntax, easier learning curve, composition API. Choose based on project needs and team expertise.",
      "keyPoints": [
        "Core concept understanding"
      ]
    },
    {
      "id": "q47",
      "question": "How do you implement authentication in React?",
      "difficulty": "Advanced",
      "category": "Security",
      "answer": "Store auth tokens securely (httpOnly cookies preferred), implement protected routes, use Context/Redux for auth state, handle token refresh, implement login/logout flows, validate on server, use libraries like Auth0 or implement JWT-based auth with proper security practices.",
      "keyPoints": [
        "State management",
        "Props and data flow"
      ],
      "followUpQuestions": [
        "How would you implement this in a production app?"
      ]
    },
    {
      "id": "q48",
      "question": "What are React development tools and debugging techniques?",
      "difficulty": "Intermediate",
      "category": "Development Tools",
      "answer": "React DevTools browser extension for component inspection, Profiler for performance analysis, console.log and debugger statements, React strict mode for development checks, Error boundaries for error handling, source maps for debugging bundled code.",
      "keyPoints": [
        "Component-based architecture",
        "State management"
      ]
    },
    {
      "id": "q49",
      "question": "How do you handle CSS in React applications?",
      "difficulty": "Intermediate",
      "category": "Styling",
      "answer": "Options include: CSS Modules (scoped styles), Styled Components (CSS-in-JS), CSS frameworks (Tailwind), Sass/Less preprocessors, inline styles (limited use), CSS custom properties. Choose based on team preferences, scalability needs, and design system requirements.",
      "keyPoints": [
        "Component-based architecture",
        "Props and data flow"
      ]
    },
    {
      "id": "q50",
      "question": "What are the best practices for React development?",
      "difficulty": "Intermediate",
      "category": "Best Practices",
      "answer": "Use functional components with hooks, follow naming conventions, keep components small and focused, use TypeScript for type safety, implement proper error handling, optimize performance, write tests, use linting/formatting tools, avoid prop drilling, maintain consistent code structure.",
      "keyPoints": [
        "Component-based architecture",
        "React Hooks",
        "Props and data flow"
      ]
    }
  ]
}
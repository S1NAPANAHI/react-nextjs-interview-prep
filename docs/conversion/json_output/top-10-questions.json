{
  "title": "Top 10 React Interview Questions",
  "description": "Master the most frequently asked React interview questions with detailed explanations and examples",
  "lastUpdated": "2025-09-25",
  "totalQuestions": 10,
  "categories": [
    "React Hooks",
    "React Fundamentals"
  ],
  "difficulties": [
    "Beginner",
    "Intermediate"
  ],
  "questions": [
    {
      "id": "q1",
      "question": "What is React and why would you use it?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "React is a JavaScript library developed by Facebook for building user interfaces, particularly single-page applications. It uses a component-based architecture, Virtual DOM for efficient updates, and follows a declarative programming paradigm. Key benefits include reusable components, better performance through Virtual DOM, strong community support, and excellent developer tools.",
      "keyPoints": [
        "Virtual DOM for performance",
        "Component-based architecture"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q2",
      "question": "What is JSX and how does it work?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "JSX (JavaScript XML) is a syntax extension for JavaScript that allows you to write HTML-like code within JavaScript. It makes React components more readable and easier to write. JSX gets transpiled by tools like Babel into React.createElement() calls. Example: <div>Hello World</div> becomes React.createElement('div', null, 'Hello World').",
      "codeExample": {
        "title": "Code Example",
        "code": "<div>Hello World</div> becomes React"
      },
      "keyPoints": [
        "Component-based architecture"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q3",
      "question": "What is the Virtual DOM?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "The Virtual DOM is a lightweight JavaScript representation of the actual DOM. React creates a virtual copy, compares it with the previous version when changes occur (diffing), and updates only the changed parts in the real DOM (reconciliation). This makes updates much faster than manipulating the DOM directly.",
      "keyPoints": [
        "Virtual DOM for performance"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q4",
      "question": "What's the difference between props and state?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Props (properties) are immutable data passed from parent to child components - they're read-only. State is mutable data owned by a component that can change over time, typically in response to user actions or network responses. Props enable data flow down the component tree, while state manages local component data.",
      "keyPoints": [
        "they're read-only. State is mutable data owned by a component that can change over time, typically in response to user actions or network responses. Props enable data flow down the component tree, while state manages local component data."
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q5",
      "question": "What are React components? Functional vs Class components?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Components are reusable, self-contained pieces of UI. Functional components are JavaScript functions that return JSX and use hooks for state/lifecycle. Class components extend React.Component and use lifecycle methods and this.state. Functional components are now preferred due to hooks, cleaner syntax, and better performance.",
      "keyPoints": [
        "Component-based architecture",
        "State management",
        "React Hooks"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q6",
      "question": "Why are keys important in React lists?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Keys help React identify which items have changed, been added, or removed in lists. They provide stable identity for each element, enabling efficient updates and preventing rendering bugs. Keys should be unique and stable - avoid using array indexes when list items can change order.",
      "keyPoints": [
        "avoid using array indexes when list items can change order.",
        "Efficient rendering"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q7",
      "question": "What is useEffect and when do you use it?",
      "difficulty": "Beginner",
      "category": "React Hooks",
      "answer": "useEffect is a Hook that lets you perform side effects in functional components (data fetching, subscriptions, DOM manipulation). It runs after render and can optionally clean up. The dependency array controls when it runs: [] runs once, [value] runs when value changes, no array runs every render.",
      "keyPoints": [
        "Component-based architecture",
        "React Hooks"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q8",
      "question": "What are controlled vs uncontrolled components?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "Controlled components have their value controlled by React state - the component's value comes from state and updates through event handlers. Uncontrolled components manage their own state internally and are accessed via refs. Controlled components are recommended for predictable data flow and easier validation.",
      "keyPoints": [
        "the component's value comes from state and updates through event handlers. Uncontrolled components manage their own state internally and are accessed via refs. Controlled components are recommended for predictable data flow and easier validation."
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    },
    {
      "id": "q9",
      "question": "What are React Hooks and name the common ones?",
      "difficulty": "Intermediate",
      "category": "React Hooks",
      "answer": "Hooks are functions that let you use state and other React features in functional components. Common hooks include: useState (state management), useEffect (side effects), useContext (context consumption), useRef (DOM access), useMemo (memoization), useCallback (function memoization), useReducer (complex state logic).",
      "keyPoints": [
        "Component-based architecture",
        "State management",
        "React Hooks"
      ],
      "followUpQuestions": [
        "What are the rules of hooks?",
        "How do custom hooks work?"
      ]
    },
    {
      "id": "q10",
      "question": "How do you handle events in React?",
      "difficulty": "Beginner",
      "category": "React Fundamentals",
      "answer": "React uses SyntheticEvents, which are wrappers around native DOM events providing consistent behavior across browsers. Event handlers are named using camelCase (onClick, not onclick) and are passed as functions. Events are automatically bound in functional components, but need binding in class components.",
      "keyPoints": [
        "Component-based architecture"
      ],
      "followUpQuestions": [
        "How does React differ from vanilla JavaScript?",
        "What are the benefits of using React?",
        "Can you provide a simple example?"
      ]
    }
  ]
}
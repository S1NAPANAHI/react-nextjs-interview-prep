{
  "title": "Complete React Interview Mastery - All Tiers",
  "description": "Comprehensive React interview questions with confidence tracking system",
  "lastUpdated": "2025-09-24",
  "version": "2.0",
  "confidenceSystem": {
    "name": "5-Circle Confidence System",
    "description": "Rate your confidence level on each question",
    "levels": {
      "0": {"label": "Not familiar", "description": "Haven't encountered this topic", "percentage": 0, "color": "#e2e8f0"},
      "1": {"label": "Just heard of it", "description": "Aware of the concept but limited understanding", "percentage": 20, "color": "#feb2b2"},
      "2": {"label": "Basic understanding", "description": "Can recognize and explain basics", "percentage": 40, "color": "#f6e05e"},
      "3": {"label": "Can explain it", "description": "Solid understanding, can teach others", "percentage": 60, "color": "#68d391"},
      "4": {"label": "Very confident", "description": "Deep knowledge, can handle follow-ups", "percentage": 80, "color": "#63b3ed"},
      "5": {"label": "Expert level", "description": "Complete mastery, can discuss edge cases", "percentage": 100, "color": "#9f7aea"}
    }
  },
  "tiers": {
    "top10": {
      "title": "Top 10 Essential Questions",
      "description": "Must-know questions that appear in 90% of React interviews",
      "difficulty": "Beginner to Intermediate",
      "frequency": "90%+",
      "gradient": "linear-gradient(135deg, #ff6b6b, #ee5a24)",
      "icon": "ðŸ”¥",
      "questions": [
        {
          "id": "essential_1",
          "question": "What is React and why is it popular?",
          "difficulty": "Beginner",
          "category": "Fundamentals",
          "frequency": 95,
          "priority": 1,
          "answer": "React is a JavaScript library for building user interfaces, particularly web applications. It was created by Facebook and is now maintained by Facebook and the community.\n\n**Key reasons for popularity:**\n\n1. **Component-Based Architecture**: Break UI into reusable, self-contained components\n2. **Virtual DOM**: Efficient updates by comparing virtual representations\n3. **Unidirectional Data Flow**: Predictable state management\n4. **Large Ecosystem**: Rich community and extensive library support\n5. **Developer Experience**: Great tools like React DevTools\n6. **Performance**: Optimizations like reconciliation and lazy loading",
          "codeExample": {
            "title": "Basic React Component",
            "code": "function Welcome({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}\n\n// Usage\n<Welcome name=\"React Developer\" />"
          },
          "keyPoints": [
            "Component-based architecture",
            "Virtual DOM for performance",
            "Strong ecosystem and community",
            "Backed by Meta (Facebook)"
          ]
        },
        {
          "id": "essential_2",
          "question": "What is JSX and how does it differ from HTML?",
          "difficulty": "Beginner",
          "category": "JSX",
          "frequency": 90,
          "priority": 2,
          "answer": "JSX (JavaScript XML) is a syntax extension for JavaScript that allows writing HTML-like code directly in JavaScript files. It makes React components more readable and expressive.\n\n**Key Differences from HTML:**\n\n1. **Attribute Names**: `className` instead of `class`, `htmlFor` instead of `for`\n2. **Self-Closing Tags**: All tags must be properly closed (`<img />`, `<br />`)\n3. **JavaScript Expressions**: Use `{}` to embed JavaScript\n4. **camelCase Properties**: `onClick` instead of `onclick`\n5. **Style Attribute**: Takes objects instead of strings",
          "codeExample": {
            "title": "JSX vs HTML Comparison",
            "code": "// JSX\nfunction Button({ onClick, children }) {\n  return (\n    <button \n      className=\"btn-primary\" \n      onClick={onClick}\n      style={{ backgroundColor: 'blue', color: 'white' }}\n    >\n      {children}\n    </button>\n  );\n}"
          },
          "keyPoints": [
            "Syntax extension for JavaScript",
            "HTML-like syntax in JS",
            "Transpiled to React.createElement",
            "Supports JavaScript expressions"
          ]
        },
        {
          "id": "essential_3",
          "question": "What is the Virtual DOM and how does it work?",
          "difficulty": "Intermediate",
          "category": "Performance",
          "frequency": 92,
          "priority": 3,
          "answer": "The Virtual DOM is a lightweight, in-memory representation of the real DOM. React uses it to optimize updates and improve application performance.\n\n**How Virtual DOM Works:**\n1. **Initial Render**: React creates a virtual DOM tree\n2. **State Change**: New virtual DOM tree is created\n3. **Diffing**: React compares (diffs) old and new virtual trees\n4. **Reconciliation**: Calculate minimum changes needed\n5. **Update**: Apply only necessary changes to real DOM\n\n**Performance Benefits:**\n- Batched updates reduce DOM manipulations\n- Efficient diffing algorithm\n- Predictable performance\n- Cross-browser consistency",
          "codeExample": {
            "title": "Virtual DOM Concept",
            "code": "// When state changes, React creates new virtual DOM\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  // Virtual DOM representation\n  // {\n  //   type: 'div',\n  //   props: {\n  //     children: [\n  //       { type: 'p', props: { children: `Count: ${count}` }},\n  //       { type: 'button', props: { onClick: increment, children: 'Increment' }}\n  //     ]\n  //   }\n  // }\n\n  return (\n    <div>\n      <p>Count: {count}</p> {/* Only this updates in real DOM */}\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}"
          },
          "keyPoints": [
            "In-memory representation of real DOM",
            "Enables efficient diffing algorithm",
            "Minimizes expensive DOM operations",
            "Batches updates for better performance"
          ]
        },
        {
          "id": "essential_4",
          "question": "What are props and state? What's the difference?",
          "difficulty": "Beginner",
          "category": "State Management",
          "frequency": 88,
          "priority": 4,
          "answer": "State and props are both used to manage data in React components, but they serve different purposes and have different characteristics.\n\n**State:**\n- Internal to the component\n- Mutable (can be changed)\n- Managed by the component itself\n- Triggers re-renders when updated\n- Private to the component\n\n**Props:**\n- External data passed from parent\n- Immutable (read-only)\n- Controlled by parent component\n- Cannot be modified by child\n- Used for component configuration",
          "codeExample": {
            "title": "State vs Props Example",
            "code": "// Component using both state and props\nfunction TodoItem({ todo, onToggle, onDelete }) { // props\n  const [isEditing, setIsEditing] = useState(false); // state\n\n  return (\n    <div>\n      {isEditing ? (\n        <input \n          value={todo.text} \n          onChange={(e) => {/* Can't modify props directly */}}\n        />\n      ) : (\n        <span>{todo.text}</span>\n      )}\n      \n      <button onClick={() => setIsEditing(!isEditing)}>\n        {isEditing ? 'Save' : 'Edit'}\n      </button>\n      \n      <button onClick={() => onToggle(todo.id)}>\n        {todo.completed ? 'Undo' : 'Complete'}\n      </button>\n      \n      <button onClick={() => onDelete(todo.id)}>\n        Delete\n      </button>\n    </div>\n  );\n}"
          },
          "keyPoints": [
            "State is internal and mutable",
            "Props are external and read-only",
            "State triggers re-renders",
            "Props are controlled by parent"
          ]
        },
        {
          "id": "essential_5",
          "question": "What is useState hook and how does it work?",
          "difficulty": "Beginner",
          "category": "Hooks",
          "frequency": 85,
          "priority": 5,
          "answer": "useState is a React Hook that lets you add state variables to functional components. It returns an array with two elements: the current state value and a function to update it.\n\n**How useState Works:**\n1. **Initialization**: Takes initial state value\n2. **Returns Array**: [currentState, setterFunction]\n3. **State Updates**: Calling setter triggers re-render\n4. **Functional Updates**: Can use function to update based on previous state\n\n**Key Features:**\n- Preserves state between re-renders\n- Triggers component re-render when state changes\n- Can handle any data type (primitive, object, array)\n- Supports lazy initialization",
          "codeExample": {
            "title": "useState Examples",
            "code": "// Basic usage\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n      <button onClick={() => setCount(prev => prev - 1)}>\n        Decrement (functional update)\n      </button>\n    </div>\n  );\n}\n\n// Object state\nfunction UserForm() {\n  const [user, setUser] = useState({ name: '', email: '' });\n\n  const updateField = (field, value) => {\n    setUser(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <form>\n      <input \n        value={user.name}\n        onChange={(e) => updateField('name', e.target.value)}\n      />\n      <input \n        value={user.email}\n        onChange={(e) => updateField('email', e.target.value)}\n      />\n    </form>\n  );\n}"
          },
          "keyPoints": [
            "Adds state to functional components",
            "Returns [value, setter] array",
            "Triggers re-renders on state change",
            "Supports functional updates"
          ]
        }
      ]
    }
  }
}